{"ast":null,"code":"// General utility functions\n// Format date to readable string\nexport const formatDate=dateString=>{if(!dateString)return'N/A';const date=new Date(dateString);return date.toLocaleDateString('en-US',{year:'numeric',month:'short',day:'numeric'});};// Format date with time\nexport const formatDateTime=dateString=>{if(!dateString)return'N/A';const date=new Date(dateString);return date.toLocaleDateString('en-US',{year:'numeric',month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'});};// Calculate age from birth date\nexport const calculateAge=birthDate=>{if(!birthDate)return null;const today=new Date();const birth=new Date(birthDate);let years=today.getFullYear()-birth.getFullYear();let months=today.getMonth()-birth.getMonth();if(months<0){years--;months+=12;}return{years,months};};// Format age for display\nexport const formatAge=age=>{if(!age)return'Unknown';const{years,months}=age;if(years===0&&months===0)return'Newborn';if(years===0)return\"\".concat(months,\" month\").concat(months!==1?'s':'');if(months===0)return\"\".concat(years,\" year\").concat(years!==1?'s':'');return\"\".concat(years,\" year\").concat(years!==1?'s':'',\" \").concat(months,\" month\").concat(months!==1?'s':'');};// Convert weight between units\nexport const convertWeight=(value,fromUnit,toUnit)=>{if(fromUnit===toUnit)return value;if(fromUnit==='kg'&&toUnit==='lbs'){return value*2.20462;}else if(fromUnit==='lbs'&&toUnit==='kg'){return value/2.20462;}return value;};// Format weight for display\nexport const formatWeight=weight=>{if(!weight||weight.value===undefined)return'N/A';return\"\".concat(weight.value,\" \").concat(weight.unit);};// Get species emoji\nexport const getSpeciesEmoji=species=>{const emojis={dog:'🐕',cat:'🐈',bird:'🐦',rabbit:'🐇',other:'🐾'};return emojis[species]||'🐾';};// Get urgency color\nexport const getUrgencyColor=urgency=>{const colors={emergency:'#dc3545',urgent:'#ffc107',monitor:'#28a745',routine:'#6c757d'};return colors[urgency]||'#6c757d';};// Get status color\nexport const getStatusColor=status=>{const colors={scheduled:'#007bff',completed:'#28a745',missed:'#dc3545',cancelled:'#6c757d'};return colors[status]||'#6c757d';};// Debounce function for search inputs\nexport const debounce=(func,wait)=>{let timeout;return function executedFunction(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}const later=()=>{clearTimeout(timeout);func(...args);};clearTimeout(timeout);timeout=setTimeout(later,wait);};};// Generate random ID (for temporary client-side IDs)\nexport const generateId=()=>{return Date.now().toString(36)+Math.random().toString(36).substr(2);};// Validate required fields\nexport const validateRequired=(fields,data)=>{const errors={};fields.forEach(field=>{if(!data[field]||data[field].toString().trim()===''){errors[field]=\"\".concat(field.charAt(0).toUpperCase()+field.slice(1),\" is required\");}});return errors;};// Capitalize first letter\nexport const capitalize=str=>{if(!str)return'';return str.charAt(0).toUpperCase()+str.slice(1).toLowerCase();};// Truncate text with ellipsis\nexport const truncateText=(text,maxLength)=>{if(!text)return'';if(text.length<=maxLength)return text;return text.substr(0,maxLength)+'...';};// Format phone number\nexport const formatPhoneNumber=phone=>{if(!phone)return'';// Remove all non-digit characters\nconst cleaned=phone.replace(/\\D/g,'');// Check if the number is valid\nif(cleaned.length===10){return cleaned.replace(/(\\d{3})(\\d{3})(\\d{4})/,'($1) $2-$3');}return phone;};// Validate email format\nexport const isValidEmail=email=>{if(!email)return false;// Regular expression for basic email validation\nconst emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};// Alternative email validation with more strict pattern\nexport const isValidEmailStrict=email=>{if(!email)return false;// More comprehensive email regex\nconst emailRegex=/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;return emailRegex.test(email);};// Password strength validation\nexport const isStrongPassword=function(password){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!password)return false;const{minLength=8,requireUppercase=true,requireLowercase=true,requireNumbers=true,requireSpecialChars=true}=options;// Check minimum length\nif(password.length<minLength){return false;}// Check for uppercase letters\nif(requireUppercase&&!/[A-Z]/.test(password)){return false;}// Check for lowercase letters\nif(requireLowercase&&!/[a-z]/.test(password)){return false;}// Check for numbers\nif(requireNumbers&&!/\\d/.test(password)){return false;}// Check for special characters\nif(requireSpecialChars&&!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)){return false;}return true;};// Get password strength score and feedback\nexport const getPasswordStrength=password=>{if(!password)return{score:0,feedback:[]};let score=0;const feedback=[];// Length check\nif(password.length>=8)score+=1;else feedback.push('Password should be at least 8 characters long');// Uppercase check\nif(/[A-Z]/.test(password))score+=1;else feedback.push('Include at least one uppercase letter');// Lowercase check\nif(/[a-z]/.test(password))score+=1;else feedback.push('Include at least one lowercase letter');// Numbers check\nif(/\\d/.test(password))score+=1;else feedback.push('Include at least one number');// Special characters check\nif(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password))score+=1;else feedback.push('Include at least one special character');// Strength rating\nlet strength;if(score<=2)strength='Weak';else if(score<=3)strength='Fair';else if(score<=4)strength='Good';else strength='Strong';return{score,strength,feedback:feedback.length===0?['Strong password!']:feedback,isStrong:score>=4};};// Simple password validation (basic requirements)\nexport const isValidPassword=password=>{if(!password)return false;return password.length>=6;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}